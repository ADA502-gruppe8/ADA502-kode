name: Test Workflow

on:
  push:
    branches:
      - yosafe_branch

env:
  MET_CLIENT_ID: ${{ secrets.MET_CLIENT_ID }}
  MET_CLIENT_SECRET: ${{ secrets.MET_CLIENT_SECRET }}

jobs:
  test:
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.x" ]
        poetry-version: [ "1.7.0","1.8.2" ]
        os: [ ubuntu-latest ]

    runs-on: ${{ matrix.os }}
    #    container:
    #      image: python:latest

    services:
      postgres_host:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    outputs:
      test-result: ${{ steps.test-report.outputs.test-result }}

    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Install Python and Poetry
        uses: ./.github/actions/python-poetry-installation-action
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ matrix.poetry-version }}

#      - name: Install Python
#        uses: actions/setup-python@v5
#        with:
#          #python-version: '3.x'
#          python-version: ${{ matrix.python-version }}
#
#      - name: python version
#        run: python --version
#
#      - name: Install Poetry
#        uses: abatilo/actions-poetry@v2
#        with:
#          version: ${{ matrix.poetry-version }}
#
#      - name: Setup a local virtual environment (if no poetry.toml file)
#        run: |
#          poetry config virtualenvs.create true --local
#          poetry config virtualenvs.in-project true --local

        # custom cache action
      - name: Load & Cache dependencies
        uses: ./.github/actions/cache-custom-action
        with:
          caching: 'true'

      - name: Run the automated tests
        # continue-on-error: true
        id: run-test
        run: poetry run pytest -v

      - name: test report failed
        id: test-report
        if: failure() && steps.run-test.outcome == 'failure'
        # maybe download error log file here
        run: |
          echo 'downloading error log file/artifacts...'
          echo "test-result=FAILED" >> $GITHUB_OUTPUT


  test-failure:
    needs: test
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output test report
        run: |
          echo 'Result ...'
          echo 'Tests : ${{ needs.test.outputs.test-result }}!'



  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output test report
        run: |
          echo 'Tests Passed!'
          echo 'Building the project...!'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Output test report
        run: |
          echo 'Deploying to production...!'
